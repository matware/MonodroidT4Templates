<# // Copyright Matware 2013 #>
<#@ output extension=".cs" #>
<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
using Android.Widget;
using Android.Views;
using Android.Content;
using Android.Util;
using Android.Preferences;
using Android.Provider;

/*********************************************************
* Auto generated by PrefsToSettings.TT 
* preferences access for mono for android <#WriteLine(DateTime.Now.ToString());#>
*********************************************************/
// 
<#
	var projectName = Host.ResolveAssemblyReference("$(ProjectName)");
	WriteLine("namespace "+projectName+".Settings {");
#>
<# 
	var files = Directory.GetFiles(Host.ResolvePath(@"..\Resources\xml\"),"*.xml");
	foreach(var file in files){
		Process(file);
	}
#>

}
<#+
	
	public void Process(string layoutRelativePath)
	{
		XNamespace nsm = "http://schemas.android.com/apk/res/android";
		XNamespace app = "http://schemas.android.com/apk/res-auto";
		var className = UppercaseFirst(System.IO.Path.GetFileNameWithoutExtension(layoutRelativePath));
		
		WriteLine("\tpublic partial class " + className+"{");
		WriteLine("\t\tpublic Context Context{get;private set;}");
		WriteLine("\t\tprivate readonly ISharedPreferences sharedPreferences;");
		
		WriteLine("\t\tpublic " + className+"(Context c){");
		WriteLine("\t\t\tContext = c;");
		WriteLine("\t\t\tsharedPreferences = PreferenceManager.GetDefaultSharedPreferences(Context);");
		WriteLine("\t\t}");
		XDocument document;

		try
		{
			document = XDocument.Load(layoutRelativePath);
		}
		catch (FileNotFoundException)
		{
			WriteLine(" //File not found: " + layoutRelativePath);
			return;
		}

		var preferenceTypes = new string []{"EditTextPreference","ListPreference","CheckBoxPreference","DialogPreference",
		"MultiSelectListPreference","RingtonePreference","SwitchPreference","TwoStatePreference"};
		
		var categoryTypes = new string []{"PreferenceCategory"};
		
		// Find the keys for the categories
		foreach(var w in categoryTypes)
			ProcessElement(w, document);

		// Find all the prefs elements
		foreach(var w in preferenceTypes)
			ProcessElement(w, document);
		WriteDisposing();
		WriteLine("\t}");
		WriteLine("");
	}

	public void WriteDisposing()
	{
		WriteLine("\t\tprivate bool disposed= false;");
		WriteLine("\t\tprotected virtual void Dispose(bool disposing)"+
		"{"+
		"if (!disposed){"+
		"sharedPreferences.Dispose();"+
		"disposed=true;"+
		"}"+
		"}"
		);
	}

	// Find the root layout element for the resource
	public void ProcessRoot(string commonRoot, XDocument doc)
	{
		if(doc == null || commonRoot== null)
			return;

		IEnumerable<XElement> dataElements = doc.XPathSelectElements("/"+commonRoot);

		// We need to have a way to find the class which maps to the xml namespace of the view... hmmm
		foreach (XElement element in dataElements)
		{
			WriteLine("\t\tpublic "+element.Name+" Root{get {return view as "+element.Name+";}}");
		}
	}

	//private static Regex r = new Regex(@"\+id/(\w+)", RegexOptions.Compiled);

	public void ProcessElement(string elementName, XDocument doc)
	{
		if(doc == null || elementName== null)
			return;

		XNamespace nsm = "http://schemas.android.com/apk/res/android";
		XNamespace app = "http://schemas.android.com/apk/res-auto";

		IEnumerable<XElement> dataElements = doc.XPathSelectElements("//"+elementName);
		if(dataElements == null)
			return;
		
		foreach (XElement element in dataElements)
		{
			var keyAttribute = element.Attribute(nsm + "key");
			
			var inputType = element.Attribute(nsm + "inputType");
			var defaultValue = element.Attribute(nsm + "defaultValue");
			string def = null;

			if(keyAttribute == null)
				continue;

			if(defaultValue != null)
			{
				def = defaultValue.Value;
			}

			string key = keyAttribute.Value;
			
			var propertyName = key;
			
			if(elementName == "SwitchPreference"){
				WriteBoolField(propertyName,def);
			}else{
				if(inputType != null)
				{
					switch(inputType.Value){
						case "number":
							WriteIntField(propertyName,def);
						break;
						case "numberSigned":
						case "numberDecimal":
							WriteFloatField(propertyName,def);
						break;
						case "text":
						default:
							WriteStringField(propertyName,def);
						break;
					}
				}else{
					WriteStringField(propertyName,def);
				}
			}
			WriteLine("\t\t}");
		}
	}

	private void WriteBoolField(string propertyName, string def){
		WriteLine("\t\tpublic bool "+PrefToCamel(propertyName) +" {");
		WriteLine("\t\t\tget{");
		WriteLine("\t\t\t\treturn sharedPreferences.GetBoolean(\""+propertyName+"\","+bool.Parse(def)+");");
		WriteLine("\t\t\t}");
		WriteLine("\t\t\tset{");
		WriteLine("\t\t\t\tsharedPreferences.Edit().PutBoolean(\""+propertyName+"\",value).Commit();");
		WriteLine("\t\t\t}");
	}

	private void WriteFloatField(string propertyName, string def){
		WriteLine("\t\tpublic float "+PrefToCamel(propertyName) +" {");
		WriteLine("\t\t\tget{");
		WriteLine("\t\t\t\treturn sharedPreferences.GetFloat(\""+propertyName+"\","+float.Parse(def)+");");
		WriteLine("\t\t\t}");
		WriteLine("\t\t\tset{");
		WriteLine("\t\t\t\tsharedPreferences.Edit().PutFloat(\""+propertyName+"\",value).Commit();");
		WriteLine("\t\t\t}");
	}
	private void WriteIntField(string propertyName, string def){
		WriteLine("\t\tpublic int "+PrefToCamel(propertyName) +" {");
		WriteLine("\t\t\tget{");
		WriteLine("\t\t\t\treturn sharedPreferences.GetInt(\""+propertyName+"\","+int.Parse(def)+");");
		WriteLine("\t\t\t}");
		WriteLine("\t\t\tset{");
		WriteLine("\t\t\t\tsharedPreferences.Edit().PutInt(\""+propertyName+"\",value).Commit();");
		WriteLine("\t\t\t}");
	}

	private void WriteLongField(string propertyName){
		WriteLine("\t\tpublic long "+PrefToCamel(propertyName) +" {");
		WriteLine("\t\t\tget{");
		WriteLine("\t\t\t\treturn sharedPreferences.GetLong(\""+propertyName+"\",-1);");
		WriteLine("\t\t\t}");

		WriteLine("\t\t\tset{");
		WriteLine("\t\t\t\tsharedPreferences.Edit().StringLong(\""+propertyName+"\",value).Commit();");
		WriteLine("\t\t\t}");
	}

	private void WriteStringField(string propertyName,string def){
		WriteLine("\t\tpublic string "+PrefToCamel(propertyName) +" {");
		WriteLine("\t\t\tget{");
		WriteLine("\t\t\t\treturn sharedPreferences.GetString(\""+propertyName+"\",\""+def+"\");");
		WriteLine("\t\t\t}");
		WriteLine("\t\t\tset{");
		WriteLine("\t\t\t\tsharedPreferences.Edit().PutString(\""+propertyName+"\",value).Commit();");
		WriteLine("\t\t\t}");
	}

	public string PrefToCamel(string s)
	{
		StringBuilder sb = new StringBuilder();
		bool nextCharToUpper = false;
		s = s.Replace("pref", string.Empty);
		foreach (var c in s)
		{
			if (c == '_')
			{
				nextCharToUpper = true;
				continue;
			}

			if (nextCharToUpper)
			{
				sb.Append(c.ToString().ToUpper());
				nextCharToUpper = false;
			}
			else
				sb.Append(c);
		}
		return sb.ToString();
	}

	static string UppercaseFirst(string s)
	{
		// Check for empty string.
		if (string.IsNullOrEmpty(s))
		{
			return string.Empty;
		}
		// Return char and concat substring.
		return char.ToUpper(s[0]) + s.Substring(1);
	}
#>
