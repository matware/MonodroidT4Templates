<# // Copyright Matware 2013 #>
<#@ output extension=".cs" #>
<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
using Android.Widget;
using Android.Views;
using Android.Content;
using Android.Util;
/*********************************************************
* Auto generated by LayoutToView.TT 
* layout access for mono for android <#WriteLine(DateTime.Now.ToString());#>
*********************************************************/
// 
<#
	var projectName = Host.ResolveAssemblyReference("$(ProjectName)");
	WriteLine("namespace "+projectName+".Drawable {");
#>
<# 
	var root = Host.ResolvePath(@".\");
	var files = Directory.GetFiles(root,"*.png");
	Dictionary<String,double> dirs = new Dictionary<String,double>() { 
	{"drawable-ldpi",120.0/160.0}, 
	{"drawable-mdpi",160.0/160.0}, 
	{"drawable-hdpi",240.0/160.0}, 
	{"drawable-xhdpi",320.0/160.0} };

	foreach(var file in files)
	{
		Regex assetRegex = new Regex(@"^(?<name>.*)_dp(?<h>\d+)x(?<w>\d+).*$",RegexOptions.Compiled|RegexOptions.IgnoreCase);
		
		var ext = System.IO.Path.GetExtension(file);
		var m = assetRegex.Match(Path.GetFileName(file));
		double h,w;
		string name;
		if (m.Success)
		{
			name = m.Groups["name"].Value;
			h = double.Parse(m.Groups["h"].Value);
			w = double.Parse(m.Groups["w"].Value);
		
			WriteLine("// source files: "+file);
			using(var origBitmap = Bitmap.FromFile(file))
			{
				foreach(var dir in dirs.Keys)
				{
					int scaledHeight = (int)(h * dirs[dir]);
					int scaledWidth = (int)(w * dirs[dir]);
					using(var b = ResizeBitmap(origBitmap as Bitmap,scaledWidth,scaledHeight))
					{
						var filename = name+ext;
						SaveBitmap(dir,b,filename);
					}
				}
			}
		}
	}
#>

	public static class DrawableFactory {

<# 
	
	foreach(var file in files){
		//BuildFactory(file);
	}
	
#>

	}
}
<#+
	private void SaveBitmap(string dir,Bitmap b, string filename)
	{		
		string root = Host.ResolvePath(@"..\Resources");	
		var path = Host.ResolvePath(Path.Combine(root,dir));
		WriteLine("// Checking :"+path);
		if(!Directory.Exists(path))
		{
			Directory.CreateDirectory(path);
			WriteLine("// target directories :"+path);
		}
		filename = Path.Combine(path,filename);

		WriteLine("// saving :"+filename);
		if(File.Exists(filename))
			File.Delete(filename);
		b.Save(filename);
	}

	private static Bitmap ResizeBitmap(Bitmap sourceBMP, int width, int height)
	{
			Bitmap result = new Bitmap(width, height);
			using (Graphics g = Graphics.FromImage(result))
				g.DrawImage(sourceBMP, 0, 0, width, height);
			return result;
	}

	private static Bitmap ResizeBitmap(string file, int width, int height)
	{
		using (var i = Bitmap.FromFile(file))
		{
			var b = i as Bitmap;
			return ResizeBitmap(b, width, height);
		}
	}
#>
